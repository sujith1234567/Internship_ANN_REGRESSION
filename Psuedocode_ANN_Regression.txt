
## importing necessary libraries 
import pandas as pd 
import numpy as np
 
## Load the dataset
data = load_dataset.csv("cars_price_data")

##preprocessing the data
FuelType_dummies = pd.get_dummies(prefix='Fue',data=df,columns=['FuelType'])


## Normalize the input data 
X = (X - X.mean()) / X.std()

## Split dataset into training and testing sets
train_data, test_data = split_dataset(data, train_ratio)


## Define the activation function (sigmoid)
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

## Define the derivative of the activation function
def sigmoid_derivative(x):
    return x * (1 - x)


## Initialize the size of Network 
input_size = X.shape[1]
hidden_size = 10
output_size = 1

## Intialize the weights for network 
input_weights = np.random.randn(input_size, hidden_size)
output_weights = np.random.randn(hidden_size, output_size)

##Intilalize the bias for network
input_bias = np.random.randn(hidden_size)
output_bias = np.random.randn(output_size)

## Train the network
learning_rate = 0.01
epochs = 1000

for i in range(epochs):

    # Forward propagation
    hidden_layer = sigmoid(np.dot(X, input_weights) + input_bias)
    output_layer = np.dot(hidden_layer, output_weights) + output_bias

    # Calculate the error
    error = y - output_layer

    # Backward propagation
    output_delta = error
    hidden_delta = output_delta.dot(output_weights.T) * sigmoid_derivative(hidden_layer)
    output_weights += learning_rate * hidden_layer.T.dot(output_delta)
    output_bias += learning_rate * np.sum(output_delta, axis=0, keepdims=True)
    input_weights += learning_rate * X.T.dot(hidden_delta)
    input_bias += learning_rate * np.sum(hidden_delta, axis=0)

# Making  predictions
new_data = np.array(...) # new input data
new_data = scaler.transform(new_data)
hidden_layer = sigmoid(np.dot(new_data, input_weights) + input_bias)
predictions = np.dot(hidden_layer, output_weights) + output_bias














    
   